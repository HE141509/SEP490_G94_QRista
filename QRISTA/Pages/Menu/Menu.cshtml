@page
@model QRB.Pages.Menu.MenuModel
@{
    ViewData["Title"] = "QRB - Menu";
}

<div class="menu-wrapper">
    <div class="menu-header">
        <div class="menu-logo">
            <img src="/images/Logo_FPT.png" alt="QRB logo" style="height:40px;vertical-align:middle;" />
            <span class="menu-title">QRista<br /><span style="font-size:1rem;font-weight:400;">Quán cafe thông minh</span></span>
        </div>
        <div class="menu-user-info">
            @if (Model.IsLoggedIn)
            {
                <div class="user-welcome">
                    <span class="welcome-text">Xin chào, <strong>@Model.DisplayName</strong></span>
                    <small class="branch-info">@Model.ChiNhanhName</small>
                </div>
                <a href="/Logout" class="btn btn-secondary">Đăng xuất</a>
            }
            else
            {
                <a href="/Login" class="btn btn-primary">Đăng nhập</a>
            }
        </div>
    </div>
    <div class="menu-content d-flex">
        <aside class="menu-sidebar">
            <select class="menu-dropdown">
                <option value="all">Tất cả</option>
                @foreach (var group in Model.ProductGroups)
                {
                    <option value="@group.MaNhom">@group.TenNhom</option>
                }
            </select>
            <ul style="height:100vh;overflow-y:auto;">
                <li class="active" data-manhom="all">Tất cả</li>
                @foreach (var group in Model.ProductGroups)
                {
                    <li data-manhom="@group.MaNhom">@group.TenNhom</li>
                }
            </ul>
        </aside>
        <div class="menu-main flex-grow-1">
            <section class="menu-items" id="menu-items-section">
                <!-- Sản phẩm sẽ được render động bằng JavaScript -->
<script>
// --- QRB Menu State: chỉ khai báo 1 lần duy nhất ---
if (!window.qrbMenuState) {
    window.qrbMenuState = {
        allItems: [],
        filteredItems: [],
        currentPage: 1,
        itemsPerPage: 9, // 9 sản phẩm/trang
        totalPages: 1
    };
}

// Hàm render sản phẩm ra section
// Hàm tăng/giảm số lượng cho từng loại sản phẩm (type)
function changeQuantityType(button, change) {
    const typeRow = button.closest('.menu-item-type-row');
    const itemDiv = button.closest('.menu-item');
    if (!typeRow || !itemDiv) return;
    const name = itemDiv.querySelector('.menu-item-title')?.innerText || '';
    const maLoai = typeRow.querySelector('.quantity')?.dataset?.maloai || '';
    const priceText = typeRow.querySelector('.menu-item-type-price')?.innerText || '';
    const price = parseInt(priceText.replace(/\D/g, '')) || 0;
    const key = name + '_' + maLoai;
    if (!window.qrbMenuState.cart) window.qrbMenuState.cart = {};
    if (!window.qrbMenuState.cart[key]) window.qrbMenuState.cart[key] = { name, maLoai, qty: 0, price };
    window.qrbMenuState.cart[key].qty = Math.max(0, (window.qrbMenuState.cart[key].qty || 0) + change);
    if (window.qrbMenuState.cart[key].qty === 0) delete window.qrbMenuState.cart[key];
    // Cập nhật lại số lượng hiển thị trên UI
    updateMenuItemQtyUI();
    updateCartSummary();
}

// Cập nhật lại số lượng hiển thị trên UI cho từng loại
function updateMenuItemQtyUI() {
    document.querySelectorAll('.menu-item').forEach((itemDiv) => {
        // Nếu có nhiều loại
        const typeRows = itemDiv.querySelectorAll('.menu-item-type-row');
        if (typeRows.length > 0) {
            typeRows.forEach(typeRow => {
                const name = itemDiv.querySelector('.menu-item-title').innerText;
                const maLoai = typeRow.querySelector('.quantity').dataset.maloai;
                const key = name + '_' + maLoai;
                const qty = window.qrbMenuState.cart[key]?.qty || 0;
                typeRow.querySelector('.quantity').innerText = qty;
            });
        } else {
            // Sản phẩm không có loại
            const name = itemDiv.querySelector('.menu-item-title').innerText;
            const key = name;
            const qty = window.qrbMenuState.cart[key]?.qty || 0;
            const qtySpan = itemDiv.querySelector('.quantity');
            if (qtySpan) qtySpan.innerText = qty;
        }
    });
}
function renderMenuItems(items) {
    const section = document.getElementById('menu-items-section');
    section.innerHTML = '';
    if (!items || items.length === 0) {
        section.innerHTML = '<div style="padding:32px 0;text-align:center;color:#888;">Không có sản phẩm nào.</div>';
        return;
    }
    // Render từng sản phẩm, nếu có nhiều loại thì hiển thị từng loại riêng biệt
    // Hiển thị 3 sản phẩm trên 1 hàng
    let rowDiv = null;
    items.forEach((item, idx) => {
        if (idx % 3 === 0) {
            rowDiv = document.createElement('div');
            rowDiv.className = 'menu-items-row';
            section.appendChild(rowDiv);
        }
        const div = document.createElement('div');
        div.className = 'menu-item';
        div.dataset.category = item.IdNhomSanPham;
        div.dataset.name = item.TenSanPham;
        let typesHtml = '';
        if (Array.isArray(item.Types) && item.Types.length > 0) {
            item.Types.forEach(type => {
                typesHtml += `
                <div class="menu-item-type-row">
                    <span class="badge" style="background:#e3f2fd;color:#1976d2;margin-right:8px;">${type.TenLoai || type.MaLoai || ''}</span>
                    <span class="menu-item-type-price">${type.DonGia ? type.DonGia.toLocaleString() : 0} đ</span>
                    <div class="menu-item-qty" style="display:inline-block;margin-left:12px;">
                        <button type="button" onclick="changeQuantityType(this, -1)">-</button>
                        <span class="quantity" data-maloai="${type.MaLoai}">0</span>
                        <button type="button" onclick="changeQuantityType(this, 1)">+</button>
                    </div>
                </div>
                `;
            });
        } else {
            typesHtml = `
                <div class="menu-item-price">Giá: <span>${item.Price ? item.Price.toLocaleString() : 0}</span> đ</div>
                <div class="menu-item-qty">
                    <button type="button" onclick="changeQuantity(this, -1)">-</button>
                    <span class="quantity">0</span>
                    <button type="button" onclick="changeQuantity(this, 1)">+</button>
                </div>
            `;
        }
        div.innerHTML = `
            <div class="menu-item-img">
                ${item.HinhAnh ? `<img src="data:image/png;base64,${item.HinhAnh}" alt="${item.TenSanPham}" />` : '<div class="img-placeholder"></div>'}
            </div>
        <div class="menu-item-info">
            <div class="menu-item-title">${item.TenSanPham}</div>
            <div class="menu-item-code" style="width:100%;text-align:center;">Mã: ${item.MaSanPham}</div>
            ${typesHtml}
            </div>
        `;
        if (rowDiv) rowDiv.appendChild(div);
    });
}

// Gọi API lấy sản phẩm theo nhóm (đúng route Razor Pages)
function loadProductsByGroup(maNhom) {
    // Luôn lấy đúng route hiện tại (dù là /Menu hay /Menu/Menu)
    const basePath = window.location.pathname.replace(/\/$/, '');
    fetch(`${basePath}?handler=GetProductsByGroup&maNhom=${encodeURIComponent(maNhom)}`)
        .then(res => res.json())
        .then(data => {
            console.log('Products loaded:', data);
            if (data && Array.isArray(data.products)) {
                // Map productTypes theo IDSanPham
                const typeMap = {};
                if (Array.isArray(data.productTypes)) {
                    data.productTypes.forEach(t => {
                        if (!typeMap[t.idSanPham]) typeMap[t.idSanPham] = [];
                        typeMap[t.idSanPham].push({
                            MaLoai: t.maLoai,
                            TenLoai: t.tenLoai,
                            DonGia: t.donGia,
                            Qty: 0
                        });
                    });
                }
                window.qrbMenuState.allItems = data.products.map(x => ({
                    ID: x.id,
                    MaSanPham: x.maSanPham,
                    TenSanPham: x.tenSanPham,
                    HinhAnh: x.hinhAnh ? arrayBufferToBase64(x.hinhAnh) : null,
                    IdNhomSanPham: x.idNhomSanPham,
                    Types: typeMap[x.id] || [],
                    Price: (typeMap[x.id] && typeMap[x.id].length > 0) ? Math.min(...typeMap[x.id].map(t => t.DonGia || 0)) : 0,
                    Qty: 0
                }));
                window.qrbMenuState.filteredItems = window.qrbMenuState.allItems;
                window.qrbMenuState.currentPage = 1;
                window.qrbMenuState.totalPages = Math.ceil(window.qrbMenuState.filteredItems.length / window.qrbMenuState.itemsPerPage);
                renderMenuItems(window.qrbMenuState.filteredItems.slice(0, window.qrbMenuState.itemsPerPage));
                updatePagination();
            } else {
                renderMenuItems([]);
            }
        })
        .catch(() => renderMenuItems([]));
}

// Helper chuyển byte[] sang base64 nếu cần
function arrayBufferToBase64(buffer) {
    if (!buffer) return '';
    if (typeof buffer === 'string') return buffer;
    let binary = '';
    let bytes = new Uint8Array(buffer);
    let len = bytes.byteLength;
    for (let i = 0; i < len; i++) {
        binary += String.fromCharCode(bytes[i]);
    }
    return window.btoa(binary);
}

// Gán sự kiện động cho sidebar
document.addEventListener('DOMContentLoaded', function() {
    document.querySelectorAll('.menu-sidebar li').forEach(li => {
        li.addEventListener('click', function() {
            document.querySelectorAll('.menu-sidebar li').forEach(tab => tab.classList.remove('active'));
            this.classList.add('active');
            const maNhom = this.dataset.manhom;
            loadProductsByGroup(maNhom);
        });
    });
    document.querySelector('.menu-dropdown').addEventListener('change', function() {
        const maNhom = this.value;
        loadProductsByGroup(maNhom);
    });
    // Gọi lần đầu (tất cả)
    loadProductsByGroup('all');
});
</script>
            </section>
            
            <!-- Pagination -->
            <div class="pagination-wrapper">
                <nav aria-label="Menu pagination">
                    <ul class="pagination">
                        <li class="page-item" id="prevPage">
                            <a class="page-link" href="#" onclick="changePage(-1)">Trước</a>
                        </li>
                        <li class="page-item active">
                            <span class="page-link" id="currentPageNum">1</span>
                        </li>
                        <li class="page-item" id="nextPage">
                            <a class="page-link" href="#" onclick="changePage(1)">Sau</a>
                        </li>
                    </ul>
            <div class="page-info">
                Trang <span id="pageInfo">1</span> / <span id="totalPagesSpan">1</span>
            </div>
                </nav>
            </div>
        </div>

    <!-- Cart Summary Floating Button -->
    <div id="cart-summary" class="cart-summary" style="display:none;">
        <div class="cart-summary-content">
            <span id="cart-count">0</span> món | <span id="cart-total">0</span> đ
        </div>
        <button id="cart-checkout-btn" class="cart-checkout-btn">Đặt hàng</button>
    </div>

    <!-- Order Confirmation Popup -->
    <div id="order-popup" class="order-popup" style="display:none;">
        <div class="order-popup-content">
            <h2 class="order-popup-title">Xác nhận đơn hàng</h2>
            <div class="order-section order-list-section">
                <div class="order-section-title">Sản phẩm đã chọn</div>
                <div id="order-items-list"></div>
            </div>
            <div class="order-section order-customer-section">
                <div class="order-section-title order-section-title-divider">Số điện thoại khách hàng</div>
                <input type="text" id="order-phone-input" class="order-phone-input" placeholder="Nhập số điện thoại khách hàng..." maxlength="15" style="width:100%;padding:10px 16px;font-size:1.08rem;margin-bottom:10px;border:1.5px solid #90caf9;border-radius:8px;background:#f7fbff;color:#1a237e;" readonly />
            </div>
            <div class="order-section order-discount-section">
                <div class="order-section-title order-section-title-divider">Chọn giảm giá</div>
                <select id="discount-select" class="order-discount-select" disabled>
                    <option value="">Vui lòng nhập SĐT khách hàng để xem ưu đãi</option>
                </select>
            </div>
                <div class="order-section order-total-section">
                    <div class="order-section-title order-section-title-divider">Tổng thanh toán</div>
                    <div class="order-popup-total">
                        <div class="order-total-row">
                            <span class="order-label-left">Tổng số tiền:</span>
                            <span class="order-value-right"><span id="order-total-raw">0</span> đ</span>
                        </div>
                        <div class="order-total-row">
                            <span class="order-label-left">Số tiền giảm:</span>
                            <span class="order-value-right"><span id="order-total-discount">0</span> đ</span>
                        </div>
                        <div class="order-total-row order-total-final">
                            <span class="order-label-left">Số tiền cần thanh toán:</span>
                            <span class="order-value-right"><span id="order-popup-total">0</span> đ</span>
                        </div>
                    </div>
                </div>
            <div class="order-section order-action-section">
                <button id="order-cancel-btn" class="order-cancel-btn">Huỷ</button>
                <button id="order-confirm-btn" class="order-confirm-btn" type="button">Xác nhận</button>
<!-- QR Code Payment Popup -->
<div id="qr-popup" class="qr-popup" style="display:none;">
    <div class="qr-popup-content">
        <h2 class="qr-popup-title">Quét mã QR để thanh toán</h2>
        <div id="qr-image-wrapper" class="qr-image-wrapper">
            <img id="vietqr-img" src="" alt="QR code thanh toán" style="max-width: 260px; display: block; margin: 0 auto;" />
        </div>
        <div id="qr-loading" style="display:none; color:#1976d2; font-weight:500; margin:10px 0;">Đang tạo mã QR...</div>
        <div class="qr-popup-desc">Vui lòng sử dụng app ngân hàng hoặc ví điện tử hỗ trợ VietQR để thanh toán.</div>
        <button id="qr-close-btn" class="order-cancel-btn" style="margin: 18px auto 0 auto; display: block;">Đóng</button>
    </div>
</div>
            </div>
        </div>
    </div>
</div>

<script>
// --- QRB Menu State: chỉ khai báo 1 lần duy nhất ---
if (!window.qrbMenuState) {
    window.qrbMenuState = {
        allItems: [],
        filteredItems: [],
        currentPage: 1,
        itemsPerPage: 15,
        totalPages: 1,
        cart: {},
        currentOrderTotal: 0
    };
}

function updateCartSummary() {
    let count = 0, total = 0;
    for (const key in window.qrbMenuState.cart) {
        count += window.qrbMenuState.cart[key].qty;
        total += window.qrbMenuState.cart[key].qty * window.qrbMenuState.cart[key].price;
    }
    document.getElementById('cart-count').innerText = count;
    document.getElementById('cart-total').innerText = total.toLocaleString();
    document.getElementById('cart-summary').style.display = count > 0 ? 'flex' : 'none';
}

function updateMenuItemQtyUI() {
    document.querySelectorAll('.menu-item').forEach((itemDiv) => {
        // Nếu có nhiều loại
        const typeRows = itemDiv.querySelectorAll('.menu-item-type-row');
        if (typeRows.length > 0) {
            typeRows.forEach(typeRow => {
                const name = itemDiv.querySelector('.menu-item-title').innerText;
                const maLoai = typeRow.querySelector('.quantity').dataset.maloai;
                const key = name + '_' + maLoai;
                const qty = window.qrbMenuState.cart[key]?.qty || 0;
                typeRow.querySelector('.quantity').innerText = qty;
            });
        } else {
            // Sản phẩm không có loại
            const name = itemDiv.querySelector('.menu-item-title').innerText;
            const key = name;
            const qty = window.qrbMenuState.cart[key]?.qty || 0;
            const qtySpan = itemDiv.querySelector('.quantity');
            if (qtySpan) qtySpan.innerText = qty;
        }
    });
}

function getPrice(size) {
    return size === 'S' ? 30000 : 40000;
}

function changeQuantity(button, change) {
    const itemDiv = button.closest('.menu-item');
    const name = itemDiv.querySelector('.menu-item-title').innerText;
    const priceDiv = button.closest('.menu-item-price');
    const size = priceDiv.querySelector('.badge').innerText.trim();
    const key = name + '_' + size;
    if (!window.qrbMenuState.cart[key]) window.qrbMenuState.cart[key] = { name, size, qty: 0, price: getPrice(size) };
    window.qrbMenuState.cart[key].qty = Math.max(0, window.qrbMenuState.cart[key].qty + change);
    if (window.qrbMenuState.cart[key].qty === 0) delete window.qrbMenuState.cart[key];
    updateCartSummary();
    updateMenuItemQtyUI();
}

function updatePagination() {
    document.getElementById('currentPageNum').textContent = window.qrbMenuState.currentPage;
    document.getElementById('pageInfo').textContent = window.qrbMenuState.currentPage;
    document.getElementById('totalPagesSpan').textContent = window.qrbMenuState.totalPages;
    document.getElementById('prevPage').classList.toggle('disabled', window.qrbMenuState.currentPage === 1);
    document.getElementById('nextPage').classList.toggle('disabled', window.qrbMenuState.currentPage === window.qrbMenuState.totalPages);
}

function changePage(direction) {
    const newPage = window.qrbMenuState.currentPage + direction;
    if (newPage >= 1 && newPage <= window.qrbMenuState.totalPages) {
        window.qrbMenuState.currentPage = newPage;
        showPage();
        updatePagination();
    }
}

function showPage() {
    const items = document.querySelectorAll('.menu-item');
    let filteredIndexes = [];
    items.forEach((item, idx) => {
        const itemCategory = item.dataset.category;
        const itemName = item.dataset.name;
        const belongsToFilter = window.qrbMenuState.filteredItems.some(f => {
            if (!f || !f.IdNhomSanPham || !f.TenSanPham) return false;
            return f.IdNhomSanPham == itemCategory && f.TenSanPham === itemName;
        });
        if (belongsToFilter) filteredIndexes.push(idx);
    });
    items.forEach(item => { item.style.display = 'none'; });
    const startIndex = (window.qrbMenuState.currentPage - 1) * window.qrbMenuState.itemsPerPage;
    const endIndex = startIndex + window.qrbMenuState.itemsPerPage;
    for (let i = startIndex; i < endIndex && i < filteredIndexes.length; i++) {
        items[filteredIndexes[i]].style.display = 'flex';
    }
    updateMenuItemQtyUI();
}

function filterMenu(category) {
    const tabs = document.querySelectorAll('.menu-sidebar li');
    tabs.forEach(tab => tab.classList.remove('active'));
    if (category === 'all') {
        window.qrbMenuState.filteredItems = window.qrbMenuState.allItems;
    } else {
        window.qrbMenuState.filteredItems = window.qrbMenuState.allItems.filter(item => item.IdNhomSanPham == category);
    }
    window.qrbMenuState.currentPage = 1;
    window.qrbMenuState.totalPages = Math.ceil(window.qrbMenuState.filteredItems.length / window.qrbMenuState.itemsPerPage);
    showPage();
    const activeTab = Array.from(tabs).find(tab => tab.dataset.manhom === category);
    if (activeTab) activeTab.classList.add('active');
    const dropdown = document.querySelector('.menu-dropdown');
    if (dropdown) dropdown.value = category;
    updatePagination();
}

// Cart summary & popup logic
document.addEventListener('DOMContentLoaded', function() {
    window.qrbMenuState.filteredItems = window.qrbMenuState.allItems;
    window.qrbMenuState.totalPages = Math.ceil(window.qrbMenuState.filteredItems.length / window.qrbMenuState.itemsPerPage);
    showPage();
    updatePagination();
    updateCartSummary();
});
if (document.readyState !== 'loading') {
    window.qrbMenuState.filteredItems = window.qrbMenuState.allItems;
    window.qrbMenuState.totalPages = Math.ceil(window.qrbMenuState.filteredItems.length / window.qrbMenuState.itemsPerPage);
    showPage();
    updatePagination();
    updateCartSummary();
}

window.qrbMenuState.currentOrderTotal = 0;
function updateOrderPopupTotal() {
    let total = 0;
    for (const key in window.qrbMenuState.cart) {
        const item = window.qrbMenuState.cart[key];
        total += item.qty * item.price;
    }
    let discount = parseInt(document.getElementById('discount-select').value) || 0;
    let finalTotal = Math.max(0, total - discount);
    document.getElementById('order-total-raw').innerText = total.toLocaleString();
    document.getElementById('order-total-discount').innerText = discount.toLocaleString();
    document.getElementById('order-popup-total').innerText = finalTotal.toLocaleString();
    window.qrbMenuState.currentOrderTotal = total;
}

document.getElementById('cart-checkout-btn').addEventListener('click', function() {
    if (document.getElementById('qr-popup').style.display !== 'none') {
        document.getElementById('qr-popup').style.display = 'none';
    }
    const list = document.getElementById('order-items-list');
    list.innerHTML = '';
    let total = 0;
    for (const key in window.qrbMenuState.cart) {
        const item = window.qrbMenuState.cart[key];
        total += item.qty * item.price;
        const div = document.createElement('div');
        div.className = 'order-item';
        div.innerHTML = `<span>${item.name} (${item.size})</span> <span>${item.qty} x ${item.price.toLocaleString()} đ</span>`;
        list.appendChild(div);
    }
    window.qrbMenuState.currentOrderTotal = total;
    fetch('/Menu/GetPhoneNumberFromSession')
        .then(res => res.json())
        .then(data => {
            if (data && data.phoneNumber) {
                const phoneInput = document.getElementById('order-phone-input');
                if (phoneInput) {
                    phoneInput.value = data.phoneNumber;
                    loadDiscountOptionsByPhone(data.phoneNumber);
                }
            }
        });
    updateOrderPopupTotal();
    document.getElementById('order-popup').style.display = 'flex';
    document.getElementById('discount-select').value = '0';
});

document.getElementById('discount-select').addEventListener('change', function() {
    updateOrderPopupTotal();
});

document.getElementById('order-cancel-btn').addEventListener('click', function() {
    document.getElementById('order-popup').style.display = 'none';
});

document.getElementById('order-confirm-btn').addEventListener('click', function() {
    let finalPrice = 0;
    try {
        finalPrice = parseInt(document.getElementById('order-popup-total').innerText.replace(/\D/g, ''));
    } catch {}
    if (!finalPrice || finalPrice < 1000) {
        alert('Số tiền thanh toán không hợp lệ!');
        return;
    }
    document.getElementById('order-popup').style.display = 'none';
    window.location.href = '/Payment/Payment?amount=' + finalPrice;
    window.qrbMenuState.cart = {};
    updateCartSummary();
    updateMenuItemQtyUI();
});

document.getElementById('qr-close-btn').addEventListener('click', function() {
    document.getElementById('qr-popup').style.display = 'none';
    window.qrbMenuState.cart = {};
    updateCartSummary();
    updateMenuItemQtyUI();
    document.getElementById('order-popup').style.display = 'none';
});

function loadDiscountOptionsByPhone(phone) {
    const select = document.getElementById('discount-select');
    select.innerHTML = '';
    if (!phone || phone.trim() === '') {
        select.disabled = true;
        select.innerHTML = '<option value="">Vui lòng nhập SĐT khách hàng để xem ưu đãi</option>';
        return;
    }
    select.disabled = true;
    select.innerHTML = '<option>Đang tải mã ưu đãi...</option>';
    fetch(`/UuDai/GetMaUuDaiBySDT?soDienThoai=${encodeURIComponent(phone)}`)
        .then(res => res.json())
        .then(data => {
            select.innerHTML = '';
            if (!data || !Array.isArray(data) || data.length === 0) {
                select.innerHTML = '<option value="0">Không có mã ưu đãi khả dụng</option>';
                select.disabled = true;
                return;
            }
            select.disabled = false;
            select.innerHTML = '<option value="0">Không áp dụng ưu đãi</option>';
            data.forEach(uudai => {
                let tienGiam = uudai.tienGiam;
                if (typeof tienGiam === 'string') tienGiam = tienGiam.replace(/[^\d.-]/g, '');
                tienGiam = Number(tienGiam);
                if (isNaN(tienGiam) || tienGiam < 0) tienGiam = 0;
                let text = uudai.maGiamGia ? `${uudai.maGiamGia} (${tienGiam.toLocaleString()}đ)` : `Giảm (${tienGiam.toLocaleString()}đ)`;
                select.innerHTML += `<option value="${tienGiam}">${text}</option>`;
            });
        })
        .catch(() => {
            select.innerHTML = '<option value="0">Không thể tải ưu đãi</option>';
            select.disabled = true;
        });
}

const phoneInput = document.getElementById('order-phone-input');
if (phoneInput) {
    phoneInput.addEventListener('input', function() {
        const phone = phoneInput.value.trim();
        if (phone.length >= 9) {
            loadDiscountOptionsByPhone(phone);
        } else {
            loadDiscountOptionsByPhone('');
        }
    });
}
</script>

@section Styles {
    <link rel="stylesheet" href="~/css/menu.css" />
    <link rel="stylesheet" href="~/css/menu-custom.css" />
}
