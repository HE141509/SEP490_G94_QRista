@page
@model QRB.Pages.MenuModel
@{
    ViewData["Title"] = "QRB - Menu";
}

<div class="menu-wrapper">
    <div class="menu-header">
        <div class="menu-logo">
            <img src="/images/Logo_FPT.png" alt="QRB logo" style="height:40px;vertical-align:middle;" />
            <span class="menu-title">QRista<br /><span style="font-size:1rem;font-weight:400;">Quán cafe thông minh</span></span>
        </div>
        <div class="menu-user-info">
            @if (Model.IsLoggedIn)
            {
                <div class="user-welcome">
                    <span class="welcome-text">Xin chào, <strong>@Model.DisplayName</strong></span>
                    <small class="branch-info">@Model.ChiNhanhName</small>
                </div>
                <a href="/Logout" class="btn btn-secondary">Đăng xuất</a>
            }
            else
            {
                <a href="/Login" class="btn btn-primary">Đăng nhập</a>
            }
        </div>
    </div>
    <div class="menu-content d-flex">
        <aside class="menu-sidebar">
            <select class="menu-dropdown" onchange="filterMenu(this.value)">
                <option value="all">Tất cả</option>
                <option value="main">Món chính</option>
                <option value="drink">Đồ uống</option>
                <option value="dessert">Tráng miệng</option>
                <option value="combo">Combo</option>
                <option value="other">Khác</option>
            </select>
            <ul>
                <li class="active" onclick="filterMenu('all')">Tất cả</li>
                <li onclick="filterMenu('main')">Món chính</li>
                <li onclick="filterMenu('drink')">Đồ uống</li>
                <li onclick="filterMenu('dessert')">Tráng miệng</li>
                <li onclick="filterMenu('combo')">Combo</li>
                <li onclick="filterMenu('other')">Khác</li>
            </ul>
        </aside>
        <div class="menu-main flex-grow-1">
            <section class="menu-items">
                <!-- Demo items -->
                @{
                    var menuItems = new[] {
                        // Đồ uống
                        new { Name = "Cà phê đen", Category = "drink", Description = "Cà phê truyền thống đậm đà" },
                        new { Name = "Cà phê sữa", Category = "drink", Description = "Cà phê pha phin với sữa đặc" },
                        new { Name = "Trà sữa", Category = "drink", Description = "Trà sữa trân châu thơm ngon" },
                        new { Name = "Nước ép cam", Category = "drink", Description = "Nước cam tươi nguyên chất" },
                        new { Name = "Trà đào", Category = "drink", Description = "Trà đào cam sả thơm mát" },
                        new { Name = "Cappuccino", Category = "drink", Description = "Cà phê Cappuccino Ý" },
                        new { Name = "Sinh tố bơ", Category = "drink", Description = "Sinh tố bơ béo ngậy" },
                        new { Name = "Nước dừa", Category = "drink", Description = "Nước dừa tươi mát lạnh" },
                        
                        // Món chính
                        new { Name = "Bánh mì", Category = "main", Description = "Bánh mì thịt nướng đặc biệt" },
                        new { Name = "Cơm gà", Category = "main", Description = "Cơm gà Hải Nam thơm ngon" },
                        new { Name = "Phở bò", Category = "main", Description = "Phở bò tái chín truyền thống" },
                        new { Name = "Bún bò Huế", Category = "main", Description = "Bún bò Huế cay nồng" },
                        new { Name = "Mì Quảng", Category = "main", Description = "Mì Quảng đặc sản miền Trung" },
                        new { Name = "Bánh cuốn", Category = "main", Description = "Bánh cuốn nóng hổi" },
                        new { Name = "Xôi gà", Category = "main", Description = "Xôi gà thơm ngon bổ dưỡng" },
                        new { Name = "Bánh bao", Category = "main", Description = "Bánh bao nhân thịt hấp" },
                        
                        // Tráng miệng
                        new { Name = "Bánh flan", Category = "dessert", Description = "Bánh flan caramel mềm mịn" },
                        new { Name = "Kem", Category = "dessert", Description = "Kem vani thơm ngon" },
                        new { Name = "Chè đậu đỏ", Category = "dessert", Description = "Chè đậu đỏ nước cốt dừa" },
                        new { Name = "Bánh tiramisu", Category = "dessert", Description = "Bánh tiramisu Ý nguyên bản" },
                        new { Name = "Sữa chua", Category = "dessert", Description = "Sữa chua dẻo mát lạnh" },
                        new { Name = "Bánh mousse", Category = "dessert", Description = "Bánh mousse chocolate" },
                        new { Name = "Chè ba màu", Category = "dessert", Description = "Chè ba màu truyền thống" },
                        new { Name = "Táo tàu", Category = "dessert", Description = "Táo tàu hầm đường phèn" },
                        
                        // Combo
                        new { Name = "Combo sáng", Category = "combo", Description = "Cà phê + bánh mì" },
                        new { Name = "Combo trưa", Category = "combo", Description = "Cơm gà + nước ngọt" },
                        new { Name = "Combo chiều", Category = "combo", Description = "Trà sữa + bánh ngọt" },
                        new { Name = "Combo tối", Category = "combo", Description = "Phở + nước cam" },
                        new { Name = "Combo gia đình", Category = "combo", Description = "Combo 4 người ăn" },
                        new { Name = "Combo sinh viên", Category = "combo", Description = "Ưu đãi cho sinh viên" },
                        
                        // Khác
                        new { Name = "Snack", Category = "other", Description = "Đồ ăn vặt ngon miệng" },
                        new { Name = "Kẹo", Category = "other", Description = "Kẹo các loại" },
                        new { Name = "Bánh quy", Category = "other", Description = "Bánh quy giòn tan" },
                        new { Name = "Mứt", Category = "other", Description = "Mứt trái cây tự nhiên" },
                        new { Name = "Hạt điều", Category = "other", Description = "Hạt điều rang muối" },
                        new { Name = "Khô gà", Category = "other", Description = "Khô gà lá chanh" }
                    };
                    
                    var itemsPerPage = 15;
                    var totalPages = (int)Math.Ceiling((double)menuItems.Length / itemsPerPage);
                    var itemsToShow = menuItems; // Hiển thị tất cả, JavaScript sẽ xử lý phân trang
                }
                @for (int i = 0; i < itemsToShow.Count(); i++) {
    var item = itemsToShow.ElementAt(i);
    <div class="menu-item" data-category="@item.Category" data-name="@item.Name">
                        <div class="menu-item-img"><img src="/images/cafe.png" alt="item" style="height:60px;" /></div>
                        <div class="menu-item-title">@item.Name</div>
                        <div class="menu-item-desc">@item.Description</div>
                        <div class="menu-item-price">
                            <span class="badge bg-warning text-dark">S</span> 
                            <span class="text-primary fw-bold">30,000<sup>đ</sup></span>
                            <div class="quantity-controls">
                                <button class="btn btn-sm btn-light" onclick="changeQuantity(this, -1)">-</button>
                                <span class="quantity">0</span>
                                <button class="btn btn-sm btn-light" onclick="changeQuantity(this, 1)">+</button>
                            </div>
                        </div>
                        <div class="menu-item-price">
                            <span class="badge bg-warning text-dark">L</span> 
                            <span class="text-primary fw-bold">40,000<sup>đ</sup></span>
                            <div class="quantity-controls">
                                <button class="btn btn-sm btn-light" onclick="changeQuantity(this, -1)">-</button>
                                <span class="quantity">0</span>
                                <button class="btn btn-sm btn-light" onclick="changeQuantity(this, 1)">+</button>
                            </div>
                        </div>
                    </div>
                }
            </section>
            
            <!-- Pagination -->
            <div class="pagination-wrapper">
                <nav aria-label="Menu pagination">
                    <ul class="pagination">
                        <li class="page-item" id="prevPage">
                            <a class="page-link" href="#" onclick="changePage(-1)">Trước</a>
                        </li>
                        <li class="page-item active">
                            <span class="page-link" id="currentPageNum">1</span>
                        </li>
                        <li class="page-item" id="nextPage">
                            <a class="page-link" href="#" onclick="changePage(1)">Sau</a>
                        </li>
                    </ul>
                    <div class="page-info">
                        Trang <span id="pageInfo">1</span> / <span id="totalPagesSpan">@totalPages</span>
                    </div>
                </nav>
            </div>
        </div>

    <!-- Cart Summary Floating Button -->
    <div id="cart-summary" class="cart-summary" style="display:none;">
        <div class="cart-summary-content">
            <span id="cart-count">0</span> món | <span id="cart-total">0</span> đ
        </div>
        <button id="cart-checkout-btn" class="cart-checkout-btn">Đặt hàng</button>
    </div>

    <!-- Order Confirmation Popup -->
    <div id="order-popup" class="order-popup" style="display:none;">
        <div class="order-popup-content">
            <h2>Xác nhận đơn hàng</h2>
            <div id="order-items-list"></div>
            <div style="margin: 12px 0 8px 0;">
                <label for="discount-select" style="font-weight:500;">Giảm giá: </label>
                <select id="discount-select" style="padding:4px 10px; border-radius:6px; border:1px solid #ccc;">
                    <option value="0">Không giảm giá</option>
                    <option value="10000">Giảm 10.000đ</option>
                    <option value="20000">Giảm 20.000đ</option>
                    <option value="50000">Giảm 50.000đ</option>
                </select>
            </div>
            <div class="order-popup-total">
                Tổng: <span id="order-popup-total">0</span> đ
            </div>
            <div class="order-popup-actions">
                <button id="order-cancel-btn" class="order-cancel-btn">Huỷ</button>
                <button id="order-confirm-btn" class="order-confirm-btn">Xác nhận</button>
            </div>
        </div>
    </div>
</div>

<script>
let currentPage = 1;
const itemsPerPage = 15;
let allItems = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(menuItems));
let filteredItems = allItems;
let totalPages = Math.ceil(filteredItems.length / itemsPerPage);

// Cart logic
let cart = {};

function updateCartSummary() {
    let count = 0, total = 0;
    for (const key in cart) {
        count += cart[key].qty;
        total += cart[key].qty * cart[key].price;
    }
    document.getElementById('cart-count').innerText = count;
    document.getElementById('cart-total').innerText = total.toLocaleString();
    document.getElementById('cart-summary').style.display = count > 0 ? 'flex' : 'none';
}

function updateMenuItemQtyUI() {
    // Update all .menu-item quantities from cart
    document.querySelectorAll('.menu-item').forEach((itemDiv, idx) => {
        // S: 30k, L: 40k
        let sKey = itemDiv.querySelector('.menu-item-title').innerText + '_S';
        let lKey = itemDiv.querySelector('.menu-item-title').innerText + '_L';
        let sQty = cart[sKey]?.qty || 0;
        let lQty = cart[lKey]?.qty || 0;
        let qtySpans = itemDiv.querySelectorAll('.quantity');
        if (qtySpans[0]) qtySpans[0].innerText = sQty;
        if (qtySpans[1]) qtySpans[1].innerText = lQty;
    });
}

function getPrice(size) {
    return size === 'S' ? 30000 : 40000;
}

function changeQuantity(button, change) {
    const itemDiv = button.closest('.menu-item');
    const name = itemDiv.querySelector('.menu-item-title').innerText;
    const priceDiv = button.closest('.menu-item-price');
    const size = priceDiv.querySelector('.badge').innerText.trim();
    const key = name + '_' + size;
    if (!cart[key]) cart[key] = { name, size, qty: 0, price: getPrice(size) };
    cart[key].qty = Math.max(0, cart[key].qty + change);
    if (cart[key].qty === 0) delete cart[key];
    updateCartSummary();
    updateMenuItemQtyUI();
}

function updatePagination() {
    document.getElementById('currentPageNum').textContent = currentPage;
    document.getElementById('pageInfo').textContent = currentPage;
    document.getElementById('totalPagesSpan').textContent = totalPages;
    document.getElementById('prevPage').classList.toggle('disabled', currentPage === 1);
    document.getElementById('nextPage').classList.toggle('disabled', currentPage === totalPages);
}

function changePage(direction) {
    const newPage = currentPage + direction;
    if (newPage >= 1 && newPage <= totalPages) {
        currentPage = newPage;
        showPage();
        updatePagination();
    }
}

function showPage() {
    const items = document.querySelectorAll('.menu-item');
    // Lấy danh sách index các item thuộc filter hiện tại
    let filteredIndexes = [];
    items.forEach((item, idx) => {
        const itemCategory = item.dataset.category;
        const itemName = item.dataset.name;
        const belongsToFilter = filteredItems.some(f => {
            if (!f || !f.Category || !f.Name) return false;
            return f.Category.toLowerCase() === itemCategory && f.Name === itemName;
        });
        if (belongsToFilter) filteredIndexes.push(idx);
    });
    // Ẩn tất cả
    items.forEach(item => { item.style.display = 'none'; });
    // Hiện đúng các item thuộc trang hiện tại
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    for (let i = startIndex; i < endIndex && i < filteredIndexes.length; i++) {
        items[filteredIndexes[i]].style.display = 'flex';
    }
    updateMenuItemQtyUI();
}

function filterMenu(category) {
    const tabs = document.querySelectorAll('.menu-sidebar li');
    tabs.forEach(tab => tab.classList.remove('active'));
    if (category === 'all') {
        filteredItems = allItems;
    } else {
        filteredItems = allItems.filter(item => item.Category === category);
    }
    currentPage = 1;
    totalPages = Math.ceil(filteredItems.length / itemsPerPage);
    showPage();
    const activeTab = Array.from(tabs).find(tab =>
        (category === 'all' && tab.textContent.trim() === 'Tất cả') ||
        (category === 'main' && tab.textContent.trim() === 'Món chính') ||
        (category === 'drink' && tab.textContent.trim() === 'Đồ uống') ||
        (category === 'dessert' && tab.textContent.trim() === 'Tráng miệng') ||
        (category === 'combo' && tab.textContent.trim() === 'Combo') ||
        (category === 'other' && tab.textContent.trim() === 'Khác')
    );
    if (activeTab) activeTab.classList.add('active');
    const dropdown = document.querySelector('.menu-dropdown');
    if (dropdown) dropdown.value = category;
    updatePagination();
}

// Cart summary & popup logic
document.addEventListener('DOMContentLoaded', function() {
    filteredItems = allItems;
    totalPages = Math.ceil(filteredItems.length / itemsPerPage);
    showPage();
    updatePagination();
    updateCartSummary();
});
if (document.readyState !== 'loading') {
    filteredItems = allItems;
    totalPages = Math.ceil(filteredItems.length / itemsPerPage);
    showPage();
    updatePagination();
    updateCartSummary();
}

let currentOrderTotal = 0;
function updateOrderPopupTotal() {
    let discount = parseInt(document.getElementById('discount-select').value) || 0;
    let finalTotal = Math.max(0, currentOrderTotal - discount);
    document.getElementById('order-popup-total').innerText = finalTotal.toLocaleString();
}

document.getElementById('cart-checkout-btn').addEventListener('click', function() {
    const list = document.getElementById('order-items-list');
    list.innerHTML = '';
    let total = 0;
    for (const key in cart) {
        const item = cart[key];
        total += item.qty * item.price;
        const div = document.createElement('div');
        div.className = 'order-item';
        div.innerHTML = `<span>${item.name} (${item.size})</span> <span>${item.qty} x ${item.price.toLocaleString()} đ</span>`;
        list.appendChild(div);
    }
    currentOrderTotal = total;
    updateOrderPopupTotal();
    document.getElementById('order-popup').style.display = 'flex';
    // Reset discount combobox
    document.getElementById('discount-select').value = '0';
});

document.getElementById('discount-select').addEventListener('change', function() {
    updateOrderPopupTotal();
});

document.getElementById('order-cancel-btn').addEventListener('click', function() {
    document.getElementById('order-popup').style.display = 'none';
});

document.getElementById('order-confirm-btn').addEventListener('click', function() {
    alert('Đơn hàng đã được gửi!');
    cart = {};
    updateCartSummary();
    updateMenuItemQtyUI();
    document.getElementById('order-popup').style.display = 'none';
});
</script>

@section Styles {
    <link rel="stylesheet" href="~/css/menu.css" />
}
